{"version":3,"sources":["images/innerHTML.png","images/virtualized.png","images/async.png","images/hype.png","slides/Intro/Intro.jsx","slides/TechStack/Old/Old.jsx","slides/TechStack/New/New.jsx","slides/Widget/Widget.jsx","slides/Widget/View/View.jsx","slides/Widget/Controller/Controller.jsx","slides/DocumentRendering/innerHTML/innerHTML.jsx","slides/DocumentRendering/Virtualized/Virtualized.jsx","slides/DocumentRendering/Async/Async.jsx","slides/DocumentRendering/ServerSide/ServerSide.jsx","slides/DocumentRendering/index.jsx","slides/Outro/Outro.jsx","slides/Atlantic/Input/Input.jsx","slides/Spectrum/Spectrum.jsx","slides/Memo/Memo.jsx","slides/UseRef/UseRef.jsx","slides/TableOfContent/TableOfContent.jsx","slides/Summary/Summary.jsx","theme.js","Presentation.jsx","serviceWorker.js","index.js"],"names":["module","exports","Intro","backgroundColor","justifyContent","alignItems","width","height","color","style","margin","padding","role","aria-label","Old","listStyleType","New","marginLeft","Widget","WidgetExample","autoFillHeight","language","ProsCons","View","Controller","InnerHTML","src","innerHTML","alt","Virtualized","fontSize","textAlign","href","virtualized","Async","async","ServerSide","DocumentRendering","target","Outro","Input","Spectrum","SpectrumAntd","Memo","MemoProblem","UseRef","TableOfContent","Summary","theme","colors","alpha","beta","gamma","delta","epsilon","fonts","header","text","Presentation","Hype","hype","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6495be5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/innerHTML.3e75eff6.png\";","module.exports = __webpack_public_path__ + \"static/media/virtualized.71232ca9.png\";","module.exports = __webpack_public_path__ + \"static/media/async.2d4d6d42.png\";","module.exports = __webpack_public_path__ + \"static/media/hype.9f00222a.png\";","import React from 'react';\nimport {Box, FlexBox, Heading, Slide} from 'spectacle';\n\nexport const Intro =\n    <Slide backgroundColor={`beta`}>\n        <FlexBox justifyContent={`center`} alignItems={`center`} width={`100%`} height={`100%`}>\n            <Box>\n                <Heading color={`gamma`} style={{margin: 0, padding: 0}}>\n                    {`React`} <span role={`img`} aria-label={`react`}>‚öõ</span>Ô∏è\n                </Heading>\n                <Heading color={`alpha`} style={{margin: 0, padding: 0}}>\n                    {`on`}\n                </Heading>\n                <Heading color={`epsilon`} style={{margin: 0, padding: 0}}>\n                    <span role={`img`} aria-label={`injection`}>üíâ</span>\n                    {`Steroids`}\n                </Heading>\n            </Box>\n        </FlexBox>\n    </Slide>","import React from 'react';\nimport {FlexBox, Heading, ListItem, Slide, UnorderedList} from 'spectacle';\n\nexport const Old =\n    <Slide backgroundColor={`beta`}>\n        <FlexBox>\n            <Heading color={`gamma`}>\n                {`Tech Stack`}\n            </Heading>\n            <Heading color={`alpha`}>{`-`}</Heading>\n            <Heading color={`epsilon`}>\n                {`Old`}\n            </Heading>\n        </FlexBox>\n        <UnorderedList style={{listStyleType: `none`}}>\n            <ListItem>{`Javascript`}</ListItem>\n            <ListItem>{`Class Components`}</ListItem>\n            <ListItem>{`GraphQL`}</ListItem>\n            <ListItem>{`Axios`}</ListItem>\n            <ListItem>{`Redux (Saga)`}</ListItem>\n            <ListItem>{`Less`}</ListItem>\n        </UnorderedList>\n    </Slide>","import React from 'react';\nimport {Box, FlexBox, Heading, ListItem, Slide, UnorderedList} from 'spectacle';\n\nexport const New =\n    <Slide backgroundColor={`beta`}>\n        <FlexBox>\n            <Heading color={`epsilon`}>\n                {`Tech Stack`}\n            </Heading>\n            <Heading color={`alpha`}>{`-`}</Heading>\n            <Heading color={`gamma`}>\n                {`New`}\n            </Heading>\n        </FlexBox>\n\n        <UnorderedList style={{listStyleType: `none`}}>\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box width={400}>{`Javascript`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box width={400}>{`Typescript`}</Box>\n                </FlexBox>\n            </ListItem>\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box width={400}>{`Class Components`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box width={400}>{`Hooks`}</Box>\n                </FlexBox>\n            </ListItem>\n            <ListItem>\n                <FlexBox>\n                    <Box>{`GraphQL`}</Box>\n                    <Box marginLeft={25}>{`‚úÖ`}Ô∏è</Box>\n                </FlexBox>\n            </ListItem>\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box width={400}>{`Axios`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box width={400}>{`Apollo Client`}</Box>\n                </FlexBox>\n            </ListItem>\n\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box width={400}>{`Redux (Saga)`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box width={400}>{`Apollo Cache`}</Box>\n                </FlexBox>\n            </ListItem>\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box width={400}>{`Less`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box width={400}>{`StyledComponents`}</Box>\n                </FlexBox>\n            </ListItem>\n        </UnorderedList>\n\n    </Slide>","import React from 'react';\nimport {Box, CodePane, FlexBox, Heading, ListItem, Slide, UnorderedList} from 'spectacle';\n\nexport const Widget =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Widget`}\n        </Heading>\n        <FlexBox justifyContent={`space-between`}>\n            <Box>\n                <Heading color={`gamma`}>\n                    {`Controller`}\n                </Heading>\n                <UnorderedList>\n                    <ListItem>{`KISS!`}</ListItem>\n                    <ListItem>{`Custom Hook`}</ListItem>\n                    <ListItem>{`Returns the Interface`}</ListItem>\n                </UnorderedList>\n            </Box>\n            <Box>\n                <Heading color={`gamma`}>\n                    {`View`}\n                </Heading>\n                <UnorderedList>\n                    <ListItem>{`Pure Function`}</ListItem>\n                    <ListItem>{`Stateless`}</ListItem>\n                    <ListItem>{`Accepts the Interface`}</ListItem>\n                </UnorderedList>\n            </Box>\n        </FlexBox>\n    </Slide>\n\nexport const WidgetExample = <Slide backgroundColor={`beta`}>\n    <Heading color={`gamma`}>\n        {`Input Usage Example`}\n    </Heading>\n    <CodePane autoFillHeight language={`jsx`}>\n        {`  const handlers = useInput({\n        defaultValue: '',\n        onChange: console.log,\n    });\n\n    return <Input {...handlers} />;`}\n    </CodePane>\n</Slide>\n\n\nexport const ProsCons =\n    <Slide backgroundColor={`beta`}>\n        <FlexBox>\n            <Heading color={`gamma`}>\n                {`View & Controller`}\n            </Heading>\n            <Heading color={`alpha`}>{`-`}</Heading>\n            <Heading color={`epsilon`}>\n                {`Pros`}\n            </Heading>\n        </FlexBox>\n\n        <UnorderedList>\n            <ListItem>{`Reusable Views for the Controller`}</ListItem>\n            <ListItem>{`Reusable Controllers for the View`}</ListItem>\n        </UnorderedList>\n    </Slide>","import {CodePane, Heading, Slide} from \"spectacle\";\nimport React from \"react\";\n\nexport const View =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`gamma`}>\n            {`Input View`}\n        </Heading>\n        <CodePane autoFillHeight language={`jsx`}>\n            {`export const Input: InputType = forwardRef(\n    ({ prefix, suffix, size = 'medium', ...props }, ref) => {\n        if (prefix || suffix) {\n            return (\n                <InputWrapperWithFix\n                    {...props}\n                    size={size}\n                    prefix={prefix}\n                    suffix={suffix}\n                    ref={ref}\n                />\n            );\n        }\n        return (\n            <StyledInputContainer\n                size={size}\n                isFullWidth={props.isFullWidth}\n                isDisabled={props.isDisabled}\n                isRound={props.isRound}\n            >\n                <InputBase {...props} ref={ref} />\n            </StyledInputContainer>\n        );\n    }\n);\n`}\n        </CodePane>\n    </Slide>","import {CodePane, Heading, Slide} from \"spectacle\";\nimport React from \"react\";\n\nexport const Controller =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Input Controller`}\n        </Heading>\n        <CodePane autoFillHeight language={`js`}>\n            {`export const useInput = ({\n    defaultValue = '',\n    isDisabled,\n    onChange,\n}) => {\n    const [value, setValue] = useState<InputProps['value']>(defaultValue);\n\n    const handleChange: InputProps['onChange'] = useCallback(\n        (e): void => {\n            if (!isDisabled) {\n                const { value } = e.currentTarget;\n                setValue(value);\n                onChange?.(e);\n            }\n        },\n        [onChange, isDisabled]\n    );\n\n    return { value, onChange: handleChange };\n};`}\n        </CodePane>\n    </Slide>","import React from 'react';\nimport {Box, CodePane, FlexBox, Heading, Image, Slide} from 'spectacle';\nimport innerHTML from '../../../images/innerHTML.png';\n\nexport const InnerHTML =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`innerHTML`}\n        </Heading>\n        <CodePane autoFillHeight language={`jsx`}>\n            {`const innerHTML = ({ children: __html }) => <div dangerouslySetInnerHTML={{ __html }}/>`}\n        </CodePane>\n        <FlexBox justifyContent={`flex-end`} alignItems={`flex-end`} height={`30vh`}>\n            <Box>\n                <Image src={innerHTML} alt={`innerHTML`} height={`250px`} width={`500px`}/>\n            </Box>\n        </FlexBox>\n    </Slide>","import React from 'react';\nimport {Box, CodePane, FlexBox, Heading, Image, Link, Slide} from 'spectacle';\nimport virtualized from '../../../images/virtualized.png';\n\nexport const Virtualized =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`React Virtualized`}\n        </Heading>\n        <Link\n            fontSize={`h4`}\n            textAlign={`center`}\n            color={`gamma`}\n            href={`https://bvaughn.github.io/react-virtualized/`}>{`https://bvaughn.github.io/react-virtualized/`}</Link>\n        <CodePane autoFillHeight language={`jsx`}>\n            {`<AutoSizer disableWidth> {\n                ({ height }) => \n                    <CellMeasurer cache={cache} columnIndex={0} key={index} rowIndex={index} parent={parent}>\n                        {({ measure, registerChild }) => (\n                            <Row marks={marks} key={index} {...props} onMount={measure} ref={registerChild}>\n                                {children[index]}\n                            </Row>\n                       )}\n                    </CellMeasurer>\n                }\n</AutoSizer>`}\n        </CodePane>\n        <FlexBox justifyContent={`flex-end`}>\n            <Box>\n                <Image src={virtualized} alt={`virtualized`} height={`150px`} width={`300px`}/>\n            </Box>\n        </FlexBox>\n    </Slide>","import React from 'react';\nimport {Box, CodePane, FlexBox, Heading, Image, Slide} from 'spectacle';\nimport async from '../../../images/async.png';\n\nexport const Async =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Async`}\n        </Heading>\n        {/* todo: snippet */}\n        <CodePane autoFillHeight language={`js`}>\n            {`const asyncForEach = useCallback((callback, delay = 0) => {\n                let index = 0;\n                \n                const loop = () => {\n                    callback(readonlyArray[index], index);\n                    \n                    if (index++ < readonlyArray.length - 1) {\n                        timeout = setTimeout(loop, delay);\n                    }\n                };\n                \n                let timeout = setTimeout(loop, delay);\n                return timeout;\n                \n},[readonlyArray]);`}\n        </CodePane>\n        <FlexBox justifyContent={`flex-end`}>\n            <Box>\n                <Image src={async} alt={`async`} height={`150px`} width={`300px`}/>\n            </Box>\n        </FlexBox>\n    </Slide>","import React from 'react';\nimport {CodePane, Heading, Slide, Text} from 'spectacle';\n\nexport const ServerSide =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Pagination - Lazy Loading`}\n        </Heading>\n        <CodePane autoFillHeight language={`graphql`}>\n            {`query Document($id: Int!, $width: Int!, $fontSize: Int!, $offset: Int!, $limit: Int!) {\n            \n                document(id: $id, width: $width, fontSize: $fontSize) {\n                        totalHeight #Int!\n                        heights #[Int!]!\n                       \n                        segments(limit: $limit, offset: $offset) [{ \n                                html #String!\n                        }]\n                }         \n}`}\n        </CodePane>\n        <Text>Performance: ???</Text>\n    </Slide>","import {Box, FlexBox, Heading, Link, Slide} from \"spectacle\";\nimport React from \"react\";\n\nexport * from './innerHTML'\nexport * from './Virtualized'\nexport * from './Async'\nexport * from './ServerSide'\n\nexport const DocumentRendering = <Slide backgroundColor={`beta`}>\n    <FlexBox justifyContent={`center`} alignItems={`center`} width={`100%`} height={`100%`}>\n        <Box>\n            <Heading color={`epsilon`}>{`Large HTML Document Rendering`}</Heading>\n            <Heading color={`gamma`} fontSize={`h3`}>{`2.3 GHz 8-Core Intel Core i9`}</Heading>\n            <Link href={`https://app.codexis.cz/doc/CR/26785`}\n                  fontSize={`h4`}\n                  textAlign={`center`}\n                  color={`gamma`}\n                  target={`_blank`}>{`https://app.codexis.cz/doc/CR/26785`}</Link>\n        </Box>\n    </FlexBox>\n</Slide>","import React from 'react';\nimport {Heading, Link, Quote, Slide} from 'spectacle';\n\nexport const Outro = (\n    <Slide backgroundColor=\"beta\">\n        <Heading color=\"epsilon\" textAlign={`right`}>\n            {`Any questions?`}\n        </Heading>\n\n        <Link textAlign={`right`} color={`gamma`}\n              href={`https://github.com/thepatriczek/react-on-steroids/`}\n              target={`_blank`}\n        >{`https://github.com/thepatriczek/react-on-steroids/`}</Link>\n        <Quote color={`alpha`}>{`Thank you.`}</Quote>\n    </Slide>\n);","import {CodePane, Heading, Slide} from \"spectacle\";\nimport React from \"react\";\n\nexport const Input =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`gamma`}>\n            {`Input`}\n        </Heading>\n        <CodePane autoFillHeight language={`jsx`}>\n            {`export const Input: React.FC<InputProps> & {\n  TextArea: React.FC<TextAreaProps>;\n} = (props) => {\n  const {\n    transferFocus,\n    defaultValue,\n    isDisabled,\n    placeholder,\n    id,\n    onEnterPress,\n    iconLeft,\n    iconRight,\n    ComponentLeft,\n    ComponentRight,\n    autoFocus,\n    isAlternative,\n    size,\n    isLoading,\n    className,\n    autoComplete,\n    htmlType,\n    isFullWidth,\n    handlersWithEvent\n  } = props;\n\n  useEffect(() => {\n    if (!!iconRight && !!ComponentRight) {\n      const err = new Error(\n        \\`Only one of iconRight or componentRight can be defined at the same time\\`\n      );\n      throw err;\n    }\n  }, [iconRight, ComponentRight]);\n\n  useEffect(() => {\n    if (!!iconRight && !!ComponentRight) {\n      const err = new Error(\n        \\`Only one of iconLeft or componentLeft can be defined at the same time\\`\n      );\n      throw err;\n    }\n  }, [iconLeft, ComponentLeft]);\n\n  const ref = React.createRef<HTMLInputElement>();\n  const [value, setValue] = React.useState<string>(defaultValue || \\`\\`);\n  const [isFocused, setFocused] = React.useState<boolean>(false);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val: string = e.target.value;\n\n    if (!isDisabled) {\n      if (typeof props.value === 'undefined') {\n        setValue(val);\n      }\n\n      props.onChange?.(handlersWithEvent ? e : val);\n    }\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \\`Enter\\`) {\n      onEnterPress?.(value);\n    }\n\n    if (handlersWithEvent) {\n      props.onKeyDown?.(e);\n    }\n  };\n\n  const onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    setFocused(false);\n    props.onBlur?.();\n  };\n\n  const onFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    setFocused(true);\n\n    props.onFocus?.();\n  };\n  const val = props.value !== undefined ? props.value : value;\n\n  const Component = (\n    <StyledInput\n      id={id}\n      value={val}\n      onChange={onChange}\n      disabled={isDisabled}\n      placeholder={isAlternative && !isDisabled ? \\`\\` : placeholder}\n      onKeyDown={onKeyDown}\n      autoFocus={autoFocus}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      ref={ref}\n      size={size as never}\n      autoComplete={autoComplete}\n      type={htmlType}\n      isFullWidth={isFullWidth}\n    />\n  );\n\n  const AlternativeComponent = (\n    <StyledInputWrapperAlt\n      size={size as Size}\n      isFocused={transferFocus || isFocused}\n      isLeftComponent={!!iconLeft}\n      isRightComponent={!!(iconRight || isLoading)}\n      hasValue={!!val}\n      isDisabled={isDisabled}\n      onClick={() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      }}\n      className={className}\n      isFullWidth={isFullWidth}\n    >\n      {iconLeft || iconRight ? (\n        <StyledInputWrapper\n          size={size as Size}\n          isFocused={\n            typeof transferFocus !== 'undefined' ? transferFocus : isFocused\n          }\n          isLeftComponent={!!iconLeft}\n          isRightComponent={!!(iconRight || isLoading)}\n          isDisabled={isDisabled}\n          onClick={() => {\n            if (ref.current) {\n              ref.current.focus();\n            }\n          }}\n          isFullWidth={isFullWidth}\n        >\n          {iconLeft && <Icon name={iconLeft} />}\n          {!!ComponentLeft && ComponentLeft}\n          {Component}\n\n          <label>{placeholder}</label>\n          {isLoading && <Icon name={'loading'} isRotating />}\n          {iconRight && !isLoading && <Icon name={iconRight} />}\n          {!!ComponentRight && !isLoading && ComponentRight}\n        </StyledInputWrapper>\n      ) : (\n        <>\n          {Component}\n          <label>{placeholder}</label>\n        </>\n      )}\n    </StyledInputWrapperAlt>\n  );\n\n  if (isAlternative && !isDisabled) {\n    return AlternativeComponent;\n  }\n\n  return (\n    <StyledInputWrapper\n      isFocused={isFocused}\n      isLeftComponent={!!(iconLeft || ComponentLeft)}\n      isRightComponent={!!(isLoading || iconRight || ComponentRight)}\n      isDisabled={isDisabled}\n      size={size as Size}\n      onClick={() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      }}\n      className={className}\n      isFullWidth={isFullWidth}\n    >\n      {iconLeft && <Icon name={iconLeft} />}\n      {!!ComponentLeft && ComponentLeft}\n      {Component}\n      {isLoading && <Icon name={'loading'} isRotating />}\n      {iconRight && !isLoading && <Icon name={iconRight} />}\n      {!!ComponentRight && !isLoading && ComponentRight}\n    </StyledInputWrapper>\n  );\n};`}\n        </CodePane>\n    </Slide>","//\n\nimport {Box, FlexBox, Heading, Link, ListItem, Slide, UnorderedList} from \"spectacle\";\nimport React from \"react\";\n\nexport const Spectrum =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Adobe Spectrum`}\n        </Heading>\n        <Link href={`https://github.com/adobe/react-spectrum`} target={`_blank`} color={`gamma`} fontSize={`h4`}\n              textAlign={`center`}>\n            {`https://github.com/adobe/react-spectrum`}\n        </Link>\n        <FlexBox justifyContent={`space-between`}>\n            <Box>\n                <Heading color={`gamma`}>\n                    {`Spectrum`}\n                </Heading>\n                <UnorderedList>\n                    <ListItem>{`Views`}</ListItem>\n                </UnorderedList>\n            </Box>\n            <Box>\n                <Heading color={`gamma`}>\n                    {`Stately`}\n                </Heading>\n                <UnorderedList>\n                    <ListItem>{`Hooks (Controller)`}</ListItem>\n                </UnorderedList>\n            </Box>\n        </FlexBox>\n    </Slide>\n\nexport const SpectrumAntd =     <Slide backgroundColor={`beta`}>\n    <Heading color={`epsilon`}>\n        {`Adobe Spectrum vs Ant Design`}\n    </Heading>\n    <FlexBox justifyContent={`space-between`}>\n        <Box>\n            <Heading color={`gamma`}>\n                {`Adobe Spectrum`}\n            </Heading>\n            <UnorderedList>\n                <ListItem>{`About 10 months`}</ListItem>\n                <ListItem>{`Reusable Views`}</ListItem>\n                <ListItem>{`Reusable (Controllers) Hooks`}</ListItem>\n            </UnorderedList>\n        </Box>\n        <Box>\n            <Heading color={`gamma`}>\n                {`Ant Design`}\n            </Heading>\n            <UnorderedList>\n                <ListItem>{`About 5 years`}</ListItem>\n                <ListItem>{`Class Components`}</ListItem>\n            </UnorderedList>\n        </Box>\n    </FlexBox>\n</Slide>","import React from 'react';\nimport {CodePane, Heading, Quote, Slide} from 'spectacle';\n\nexport const Memo =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`gamma`}>\n            {`Memoization`}\n        </Heading>\n        <CodePane autoFillHeight language={`js`}>\n            {`const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b])\nconst memoizedCallback = useCallback(() => {doSomething(a, b);},[a, b])`}\n        </CodePane>\n        <Quote>{`Time-space tradeoff`}</Quote>\n    </Slide>\n\n\nexport const MemoProblem =\n    <Slide backgroundColor={`beta`}>\n            <Heading color={`gamma`}>\n                    {`Memoization Deps`}\n            </Heading>\n            <CodePane autoFillHeight language={`js`}>\n                    {`return useMemo(() => {...}, [ü§£,üòÇ,üòÜ,üòÅ,üòÑ,üòÖ,üòÄ,üòä,üôÇ,üôÉ,ü§®,üßê,üòî,üò¢, ...üí©]);`}\n            </CodePane>\n    </Slide>","import React from 'react';\nimport {CodePane, Heading, Quote, Slide} from 'spectacle';\n\nexport const UseRef =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`useRef`}\n        </Heading>\n        <CodePane autoFillHeight language={`jsx`}>\n            {`const ref = useRef()\nref.current = new Map();\nref.current = \\`üç∫\\`;\n\n<input ref={ref} type=\"text\" />; \n\nconst usePrevious = (value) => {\n  const ref = useRef()\n  \n  useEffect(() => {\n    ref.current = value\n  });\n  \n  return ref.current\n}`}\n        </CodePane>\n        <Quote>\n            {`Mutating the .current property doesn‚Äôt cause a re-render.`}\n            <br/>\n            {`For the best React optimization you shouldn't use React ü§Ø `}</Quote>\n    </Slide>\n","import {Heading, ListItem, Slide, UnorderedList} from \"spectacle\";\nimport React from \"react\";\n\nexport const TableOfContent =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Topics`}\n        </Heading>\n\n        <UnorderedList style={{listStyleType: `none`}}>\n            <ListItem>{`Our TechStack`}</ListItem>\n            <ListItem>{`How to reuse components effectively?`}</ListItem>\n            <ListItem>{`Optimization`}</ListItem>\n            <ListItem>{`Large data rendering`}</ListItem>\n        </UnorderedList>\n    </Slide>","import {Heading, Slide, UnorderedList, ListItem} from \"spectacle\";\nimport React from \"react\";\n\nexport const Summary =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Summary`}\n        </Heading>\n        <UnorderedList>\n            <ListItem>{`Reusable Components - View, Controller (Hooks)`}</ListItem>\n            <ListItem>{`Adobe Spectrum`}</ListItem>\n            <ListItem>{`Memoization - time-space tradeoff`}</ListItem>\n            <ListItem>{`useRef - stops unnecessary rendering`}</ListItem>\n            <ListItem>{`Large lists - React Virtualized`}</ListItem>\n        </UnorderedList>\n    </Slide>","export const alpha = '#FFF';\nexport const beta = '#1e1e1e';\nexport const gamma = '#03A9FC';\nexport const delta = '#CECECE';\nexport const epsilon = 'hotpink';\n\nexport const theme = {\n    colors: {\n        alpha,\n        beta,\n        gamma,\n        delta,\n        epsilon\n    },\n    fonts: {\n        header: `-apple-system,BlinkMacSystemFont,'Segoe UI'`,\n        text: `-apple-system,BlinkMacSystemFont,'Segoe UI'`\n    }\n}","import React from 'react';\nimport {Deck, Image, Slide} from 'spectacle';\nimport {\n    Async,\n    Controller,\n    DocumentRendering,\n    InnerHTML,\n    Input,\n    Intro,\n    Memo,\n    MemoProblem,\n    New,\n    Old,\n    Outro,\n    ProsCons,\n    ServerSide,\n    Spectrum,\n    SpectrumAntd,\n    TableOfContent,\n    UseRef,\n    View,\n    Virtualized,\n    Widget,\n    WidgetExample,\n    Summary\n} from './slides';\nimport {theme} from './theme'\nimport hype from './images/hype.png';\n\nexport const Presentation = () =>\n    <Deck theme={theme}>\n        {Intro}\n        {TableOfContent}\n\n        {Old}\n        {New}\n        {Hype}\n        {/* recapitulation */}\n\n        {Input}\n        {Widget}\n        {View}\n        {Controller}\n        {WidgetExample}\n        {ProsCons}\n        {Spectrum}\n        {SpectrumAntd}\n        {/* recapitulation */}\n\n        {Memo}\n        {MemoProblem}\n        {UseRef}\n        {/* recapitulation */}\n\n        {DocumentRendering}\n        {InnerHTML}\n        {Virtualized}\n        {Async}\n        {ServerSide}\n\n        {Summary}\n        {Outro}\n    </Deck>\n\nconst Hype = <Slide backgroundColor={`alpha`}><Image src={hype} alt={`hype`} height={`100%`}/></Slide>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Presentation} from './Presentation';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Presentation/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}