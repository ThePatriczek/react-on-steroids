{"version":3,"sources":["slides/Intro/Intro.jsx","slides/TechStack/Old/Old.jsx","slides/TechStack/New/New.jsx","slides/Widget/Widget.js","slides/Outro/Outro.jsx","theme.js","Presentation.js","serviceWorker.js","index.js"],"names":["Intro","backgroundColor","color","role","aria-label","Old","style","listStyleType","New","justifyContent","Widget","Outro","textAlign","href","target","theme","colors","alpha","beta","gamma","delta","epsilon","fonts","header","text","Presentation","src","alt","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c62d30fb.chunk.js","sourcesContent":["import React from 'react';\nimport {Heading, Slide} from 'spectacle';\n\nexport const Intro =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`gamma`}>\n            {`React`} <span role={`img`} aria-label={`react`}>‚öõ</span>Ô∏è\n            <br/>\n            {`on`}\n            <br/>\n            <span role={`img`} aria-label={`injection`}>üíâ</span>\n            {`Steroids`}\n        </Heading>\n    </Slide>","import React from 'react';\nimport {Heading, ListItem, Slide, UnorderedList} from 'spectacle';\n\nexport const Old =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Tech Stack - Old`}\n        </Heading>\n        <UnorderedList style={{listStyleType: `none`}}>\n            <ListItem>{`Javascript`}</ListItem>\n            <ListItem>{`Class Components`}</ListItem>\n            <ListItem>{`GraphQL`}</ListItem>\n            <ListItem>{`Axios`}</ListItem>\n            <ListItem>{`Redux`}</ListItem>\n            <ListItem>{`Less`}</ListItem>\n        </UnorderedList>\n    </Slide>","import React from 'react';\nimport {Box, FlexBox, Heading, ListItem, Slide, UnorderedList} from 'spectacle';\n\nexport const New =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Tech Stack - New`}\n        </Heading>\n        <UnorderedList style={{listStyleType: `none`}}>\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box>{`Javascript`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box>{`Typescript`}</Box>\n                </FlexBox>\n            </ListItem>\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box>{`Class Components`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box>{`Hooks`}</Box>\n                </FlexBox>\n            </ListItem>\n            <ListItem>\n                <FlexBox>\n                    <Box>{`GraphQL`}</Box>\n                    <Box>{`‚úÖ`}Ô∏è</Box>\n                </FlexBox>\n            </ListItem>\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box>{`Axios`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box>{`Apollo Client`}</Box>\n                </FlexBox>\n            </ListItem>\n\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box>{`Redux`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box>{`Apollo Cache`}</Box>\n                </FlexBox>\n            </ListItem>\n            <ListItem>\n                <FlexBox justifyContent={`space-between`}>\n                    <Box>{`Less`}</Box>\n                    <Box>{`‚û°`}Ô∏è</Box>\n                    <Box>{`StyledComponents`}</Box>\n                </FlexBox>\n            </ListItem>\n        </UnorderedList>\n    </Slide>","import React from 'react';\nimport {Box, FlexBox, Heading, Slide, UnorderedList, ListItem} from 'spectacle';\n\nexport const Widget =\n    <Slide backgroundColor={`beta`}>\n        <Heading color={`epsilon`}>\n            {`Widget`}\n        </Heading>\n        <FlexBox justifyContent={`space-between`}>\n            <Box>\n                <Heading color={`gamma`}>\n                    {`Controller`}\n                </Heading>\n                <UnorderedList>\n                    <ListItem>{`KISS!`}</ListItem>\n                    <ListItem>{`Returns the Interface`}</ListItem>\n                </UnorderedList>\n            </Box>\n            <Box>\n                <Heading color={`gamma`}>\n                    {`View`}\n                </Heading>\n                <UnorderedList>\n                    <ListItem>{`Pure Function`}</ListItem>\n                    <ListItem>{`Stateless`}</ListItem>\n                    <ListItem>{`Accepts the Interface`}</ListItem>\n                </UnorderedList>\n            </Box>\n        </FlexBox>\n    </Slide>","import React from 'react';\nimport {Heading, Link, Quote, Slide} from 'spectacle';\n\nexport const Outro = (\n    <Slide backgroundColor=\"beta\">\n        <Heading color=\"epsilon\" textAlign={`right`}>\n            {`Any questions?`}\n        </Heading>\n\n        <Link textAlign={`right`} color={`gamma`}\n              href={`https://github.com/thepatriczek/react-on-steroids/`}\n              target={`_blank`}\n        >{`https://github.com/thepatriczek/react-on-steroids/`}</Link>\n        <Quote color={`alpha`}>{`Thank you.`}</Quote>\n    </Slide>\n);","export const alpha = '#FFF';\nexport const beta = '#1F2022';\nexport const gamma = '#03A9FC';\nexport const delta = '#CECECE';\nexport const epsilon = 'hotpink';\n\nexport const theme = {\n    colors: {\n        alpha,\n        beta,\n        gamma,\n        delta,\n        epsilon\n    },\n    fonts: {\n        header: `-apple-system,BlinkMacSystemFont,'Segoe UI'`,\n        text: `-apple-system,BlinkMacSystemFont,'Segoe UI'`\n    }\n}","import React from 'react';\nimport {Deck, Image, Slide} from 'spectacle';\nimport {Intro, New, Old, Outro, Widget} from './slides';\nimport {theme} from './theme'\n\nexport const Presentation = () =>\n    <Deck theme={theme}>\n        {Intro}\n        {Old}\n        {New}\n        <Slide backgroundColor={`alpha`}><Image src={`hype.png`} alt={`hype`} height={`100%`}/></Slide>\n        {Widget}\n        {/* Widget\n                Controller (Hooks)\n                View\n                adobe/react-spectrum\n                antd (old react) vs spectrum (new react)\n         */}\n\n        {/* DocumentRendering\n                Directly to DOM\n                Virtualized\n                Async\n                Server side\n            */}\n\n        {Outro}\n    </Deck>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Presentation} from './Presentation';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Presentation/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}